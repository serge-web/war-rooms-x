# Testing framework
- /src/rooms-test
  - Unit tests using Jest and React Testing Library (60% of test effort)
  - Integration tests using Jest with MSW for XMPP mocking (25% of test effort)
  - E2E tests using Playwright (15% of test effort)
  - Test coverage thresholds: Overall 80%, Hooks 90%, Components 85%, Utilities 90%
  - @testing-library/react-hooks for testing hooks in isolation

# API Project
- /src/rooms-api
  - XMPP-based real-time communication using StanzaJS
  - PubSub for game state management
  - MUC (Multi-User Chat) for room-based messaging
  - Authentication and role-based access control
  - OpenFire REST API for admin operations

# Context documents
- /documents
  - Technical overview and architecture
  - Requirements specification
  - Test strategy and sequence
  - UI/UX component reference
  - XMPP API specification
  - Message schema and PubSub node index

# Project structure
Use the project structure specified in ./documents/technical-overview.md

# Frontend stack
- React 18+
- TypeScript
- TailwindCSS with shadcn/ui
- FlexLayout for tabbed interface
- RJSF for structured forms
- Zustand or React Query for state management
- React Router for routing

# React Hooks architecture
- useWargame() - game state
- useRooms() - all accessible rooms
- useRoom(roomId) - messages, postMessage, read tracking
- useForce() - logged-in force
- useForces() - all forces
- usePlayer() - logged-in player metadata
- useTemplates() - available templates
- useTemplate(templateId) - fetch individual template

# Coding style guidelines
- Always follow SOLID principles
- TypeScript for type safety
- JavaScript strings should be wrapped in single quotes, except in JSON files
- No trailing semi-colons in TypeScript files
- React Hooks files should be stored in the same folder as the component they are used in
- One class per file, no God classes
- Follow DRY principles
- Use yarn as package manager
- Test-driven development approach (write tests first)